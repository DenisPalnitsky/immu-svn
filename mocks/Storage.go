// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	data "github.com/DenisPalnitsky/immu-svn/pkg/data"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// AddOrUpdateFiles provides a mock function with given fields: repoName, files
func (_m *Storage) AddOrUpdateFiles(repoName string, files map[string]string) (int, int, error) {
	ret := _m.Called(repoName, files)

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) (int, int, error)); ok {
		return rf(repoName, files)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string) int); ok {
		r0 = rf(repoName, files)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string) int); ok {
		r1 = rf(repoName, files)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, map[string]string) error); ok {
		r2 = rf(repoName, files)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Storage_AddOrUpdateFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrUpdateFiles'
type Storage_AddOrUpdateFiles_Call struct {
	*mock.Call
}

// AddOrUpdateFiles is a helper method to define mock.On call
//   - repoName string
//   - files map[string]string
func (_e *Storage_Expecter) AddOrUpdateFiles(repoName interface{}, files interface{}) *Storage_AddOrUpdateFiles_Call {
	return &Storage_AddOrUpdateFiles_Call{Call: _e.mock.On("AddOrUpdateFiles", repoName, files)}
}

func (_c *Storage_AddOrUpdateFiles_Call) Run(run func(repoName string, files map[string]string)) *Storage_AddOrUpdateFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string))
	})
	return _c
}

func (_c *Storage_AddOrUpdateFiles_Call) Return(added int, updated int, err error) *Storage_AddOrUpdateFiles_Call {
	_c.Call.Return(added, updated, err)
	return _c
}

func (_c *Storage_AddOrUpdateFiles_Call) RunAndReturn(run func(string, map[string]string) (int, int, error)) *Storage_AddOrUpdateFiles_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepo provides a mock function with given fields: repoName
func (_m *Storage) CreateRepo(repoName string) error {
	ret := _m.Called(repoName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(repoName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_CreateRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepo'
type Storage_CreateRepo_Call struct {
	*mock.Call
}

// CreateRepo is a helper method to define mock.On call
//   - repoName string
func (_e *Storage_Expecter) CreateRepo(repoName interface{}) *Storage_CreateRepo_Call {
	return &Storage_CreateRepo_Call{Call: _e.mock.On("CreateRepo", repoName)}
}

func (_c *Storage_CreateRepo_Call) Run(run func(repoName string)) *Storage_CreateRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storage_CreateRepo_Call) Return(_a0 error) *Storage_CreateRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_CreateRepo_Call) RunAndReturn(run func(string) error) *Storage_CreateRepo_Call {
	_c.Call.Return(run)
	return _c
}

// Diff provides a mock function with given fields: repoName, filePath
func (_m *Storage) Diff(repoName string, filePath string) ([]data.DiffLogItem, error) {
	ret := _m.Called(repoName, filePath)

	var r0 []data.DiffLogItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]data.DiffLogItem, error)); ok {
		return rf(repoName, filePath)
	}
	if rf, ok := ret.Get(0).(func(string, string) []data.DiffLogItem); ok {
		r0 = rf(repoName, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.DiffLogItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(repoName, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_Diff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Diff'
type Storage_Diff_Call struct {
	*mock.Call
}

// Diff is a helper method to define mock.On call
//   - repoName string
//   - filePath string
func (_e *Storage_Expecter) Diff(repoName interface{}, filePath interface{}) *Storage_Diff_Call {
	return &Storage_Diff_Call{Call: _e.mock.On("Diff", repoName, filePath)}
}

func (_c *Storage_Diff_Call) Run(run func(repoName string, filePath string)) *Storage_Diff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Storage_Diff_Call) Return(_a0 []data.DiffLogItem, _a1 error) *Storage_Diff_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_Diff_Call) RunAndReturn(run func(string, string) ([]data.DiffLogItem, error)) *Storage_Diff_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollectionInfo provides a mock function with given fields: repoName
func (_m *Storage) GetCollectionInfo(repoName string) error {
	ret := _m.Called(repoName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(repoName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_GetCollectionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionInfo'
type Storage_GetCollectionInfo_Call struct {
	*mock.Call
}

// GetCollectionInfo is a helper method to define mock.On call
//   - repoName string
func (_e *Storage_Expecter) GetCollectionInfo(repoName interface{}) *Storage_GetCollectionInfo_Call {
	return &Storage_GetCollectionInfo_Call{Call: _e.mock.On("GetCollectionInfo", repoName)}
}

func (_c *Storage_GetCollectionInfo_Call) Run(run func(repoName string)) *Storage_GetCollectionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storage_GetCollectionInfo_Call) Return(_a0 error) *Storage_GetCollectionInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_GetCollectionInfo_Call) RunAndReturn(run func(string) error) *Storage_GetCollectionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
