
name: test-and-lint
on: [push, workflow_call]

jobs:
  ci:
    name: ci
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.21

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod # This will cache the Go modules
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
  
    - name: Build
      run:  go build -v ./...

    # convert test results to junit for reporting
    - name: Install Test Reports Dependencies
      run: go install github.com/jstemmer/go-junit-report/v2@latest && go install github.com/axw/gocov/gocov@latest && go install github.com/AlekSi/gocov-xml@latest

    - name: Run Tests with Coverage
      run: go test -v ./... -coverprofile=coverage.txt -covermode count 2>&1 ./... | go-junit-report -set-exit-code > report.xml
    
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always() # This ensures that test results are published even if the test step fails
      with:
        files: ./report.xml

    - name: Convert coverage report 
      run: go install github.com/axw/gocov/gocov@latest && go install github.com/AlekSi/gocov-xml@latest && gocov convert coverage.txt | gocov-xml > coverage.xml      

    - name: Generate Coverage Summary Report 
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.xml

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
        
    - name: Lint
      uses: golangci/golangci-lint-action@v3.1.0
      with:
        working-directory: ${{ inputs.working-directory }}



    
